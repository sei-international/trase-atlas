#!/bin/bash

rm -r files
mkdir -p build files

# Argentina - download (IGN 2019)
if [ ! -f build/argentina.shp ]; then
  curl -o build/argentina.zip 'http://ramsac.ign.gob.ar/operaciones_sig/shp_from_geoserver/download.php?f=c2hwOjpkZXBhcnRhbWVudG8uemlw'
  unzip -od build build/argentina.zip departamento.shp departamento.dbf
  for i in build/departamento.*; do mv -- "$i" "${i/departamento/argentina}"; done
  chmod a-x build/argentina.*
fi

# Argentina - dictionary
aws s3 cp s3://trase-storage/argentina/spatial/BOUNDARIES/departments/2019/AR_DEPARTMENTS.csv build/dictionary.csv
dictionary="$(awk -F "\"*;\"*" -v OFS=';' '{print $2, $5, $7, $9}' build/dictionary.csv)"
echo "$dictionary" > build/dictionary.csv

# Argentina - topojson
geo2topo -q 1e5 -n level3=<( \
    mapshaper build/argentina.shp -simplify 2% keep-shapes -clean -o format=geojson - \
      | ndjson-cat \
      | ndjson-split 'd.features' \
      | ndjson-filter 'd.properties.in1 !== "94021" && d.properties.in1 !== "94028"' \
      | ndjson-map '(d.id = d.properties.in1, delete d.properties, d)') \
  | topomerge level2=level3 -k 'd.id.slice(0, 2)' \
  | topomerge level1=level2 \
  | node ./properties.js \
  > files/argentina.json

# Brazil - download (IBGE 2017)
if [ ! -f build/brazil.shp ]; then
  curl -o build/brazil.zip 'ftp://geoftp.ibge.gov.br/organizacao_do_territorio/malhas_territoriais/malhas_municipais/municipio_2017/Brasil/BR/br_municipios.zip'
  unzip -od build build/brazil.zip BRMUE250GC_SIR.shp BRMUE250GC_SIR.dbf
  for i in build/BRMUE250GC_SIR.*; do mv -- "$i" "${i/BRMUE250GC_SIR/brazil}"; done
  chmod a-x build/brazil.*
fi

# Brazil - dictionary
aws s3 cp s3://trase-storage/brazil/spatial/BOUNDARIES/ibge/2017/out/br_municipalities_2017.csv build/dictionary.csv
dictionary="$(iconv -f ISO8859-1 -t UTF8 build/dictionary.csv | awk -F "\"*;\"*" -v OFS=';' '{print $2, $3, $4, $5}')"
echo "$dictionary" > build/dictionary.csv

# Brazil - topojson
geo2topo -q 1e5 -n level3=<( \
    mapshaper build/brazil.shp -simplify 2% keep-shapes -clean -o format=geojson - \
      | ndjson-cat \
      | ndjson-split 'd.features' \
      | ndjson-map '(d.id = d.properties.CD_GEOCMU, delete d.properties, d)') \
  | topomerge level2=level3 -k 'd.id.slice(0, 2)' \
  | topomerge level1=level2 \
  | node ./properties.js \
  > files/brazil.json

# Colombia - download (DANE 2017)
# https://geoportal.dane.gov.co/descargas/mgn_2017/MGN2017_00_NACIONAL.rar
declare -a filetypes=(".shp" ".dbf")
if [ ! -f build/colombia.shp ]; then
  for i in "${filetypes[@]}"
  do
    aws s3 cp s3://trase-storage/colombia/spatial/BOUNDARIES/dane/in/MGN_MPIO_POLITICO"$i" build/colombia"$i"
  done
  chmod a-x build/colombia.*
fi

# Colombia - dictionary
shp2json -n --encoding UTF-8 build/colombia.shp \
  | ndjson-map 'd.properties' \
  | json2csv -n > build/dictionary.csv
dictionary="$(awk -F "\"*,\"*" -v OFS=';' '{print $3, $4, $2, $8}' build/dictionary.csv)"
echo "$dictionary" > build/dictionary.csv

# Colombia - topojson
geo2topo -q 1e5 -n level3=<( \
    mapshaper build/colombia.shp -simplify 0.5% keep-shapes -clean -o format=geojson - \
      | ndjson-cat \
      | ndjson-split 'd.features' \
      | ndjson-map '(d.id = d.properties.MPIO_CCDGO, delete d.properties, d)') \
  | topomerge level2=level3 -k 'd.id.slice(0, 2)' \
  | topomerge level1=level2 \
  | node ./properties.js \
  > files/colombia.json

# Ecuador - download (INEC 2015)
if [ ! -f build/ecuador.shp ]; then
  curl -ko build/ecuador.zip 'https://www.ecuadorencifras.gob.ec/documentos/web-inec/Cartografia/Clasificador_Geografico/2015/SHP.zip'
  unzip -od build build/ecuador.zip SHP/nxparroquias.shp SHP/nxparroquias.dbf
  for i in build/SHP/nxparroquias.*; do mv -- "$i" "${i/SHP\/nxparroquias/ecuador}"; done
  rmdir build/SHP
  chmod a-x build/ecuador.*
fi

# Ecuador - dictionary
shp2json -n --encoding UTF-8 build/ecuador.shp \
  | ndjson-map 'd.properties' \
  | json2csv -n > build/dictionary.csv
dictionary="$(iconv -f ISO8859-1 -t UTF8 build/dictionary.csv | awk -F "\"*,\"*" -v OFS=';' '{print $1, $2, $7, $8}')"
echo "$dictionary" > build/dictionary.csv

# Ecuador - topojson
geo2topo -q 1e5 -n level3=<( \
    mapshaper build/ecuador.shp -proj wgs84 from='+proj=utm +zone=17 +south +datum=WGS84 +units=m +no_defs' -simplify 2% keep-shapes -clean -o format=geojson - \
      | ndjson-cat \
      | ndjson-split 'd.features' \
      | ndjson-map '(d.id = d.properties.DPA_PARROQ, delete d.properties, d)') \
  | topomerge level2=level3 -k 'd.id.slice(0, 2)' \
  | topomerge level1=level2 \
  | node ./properties.js \
  > files/ecuador.json

# Indonesia - download (BIG 2016)
if [ ! -f build/indonesia.geojson ]; then
  aws s3 cp s3://trase-storage/indonesia/spatial/BOUNDARIES/big/kabupaten_boundaries_2016.geojson build/indonesia.geojson
  chmod a-x build/indonesia.*
fi

# Indonesia - dictionary
aws s3 cp s3://trase-storage/indonesia/spatial/BOUNDARIES/bps/out/kabupaten_dictionary_2017_BPS_55.csv build/dictionary.csv
dictionary="$(awk -F "\"*;\"*" -v OFS=';' '{print $4, $3, $2, $1}' build/dictionary.csv)"
echo "$dictionary" > build/dictionary.csv

# Indonesia - topojson
geo2topo -q 1e5 -n level3=<( \
    mapshaper build/indonesia.geojson -simplify 2% keep-shapes -clean -o format=geojson - \
      | ndjson-cat \
      | ndjson-split 'd.features' \
      | ndjson-map '(d.id = d.properties.kab_code.toString(), delete d.properties, d)') \
  | topomerge level2=level3 -k 'd.id.slice(0, 2)' \
  | topomerge level1=level2 \
  | node ./properties.js \
  > files/indonesia.json

# Paraguay - download (DGEEC 2019)
if [ ! -f build/paraguay.geojson ]; then
  curl -o build/paraguay.geojson 'http://geo.stp.gov.py/user/dgeec/api/v2/sql?format=GeoJSON&q=SELECT%20*%20FROM%20dgeec.paraguay_2019_distritos'
  chmod a-x build/paraguay.*
fi

# Paraguay - dictionary
ndjson-cat build/paraguay.geojson \
  | ndjson-split 'd.features' \
  | ndjson-map 'd.properties' \
  | json2csv -n > build/dictionary.csv
dictionary="$(awk -F "\"*,\"*" -v OFS=';' '{print $2, $6, $3, $4}' build/dictionary.csv)"
echo "$dictionary" > build/dictionary.csv

# Paraguay - topojson
geo2topo -q 1e5 -n level3=<( \
    mapshaper build/paraguay.geojson -simplify 2% keep-shapes -clean -o format=geojson - \
      | ndjson-cat \
      | ndjson-split 'd.features' \
      | ndjson-map '(d.id = d.properties.cod_2, delete d.properties, d)') \
  | topomerge level2=level3 -k 'd.id.slice(0, 2)' \
  | topomerge level1=level2 \
  | node ./properties.js \
  > files/paraguay.json

# Bolivia - download (SIIP)
# http://siip.produccion.gob.bo:8080/geoserver/ows then saved on S3 as geojson via QGIS
if [ ! -f build/bolivia.geojson ]; then
  aws s3 cp s3://trase-storage/bolivia/spatial/BOUNDARIES/siip/Limite_Municipios.geojson build/bolivia.geojson
  chmod a-x build/bolivia.*
fi

# Bolivia - dictionary
ndjson-cat build/bolivia.geojson \
  | ndjson-split 'd.features' \
  | ndjson-map 'd.properties' \
  | json2csv -n > build/dictionary.csv
dictionary="$(awk -F "\"*,\"*" -v OFS=';' '{if (NR!=1) {print sprintf("%06.0f", $5), $3, substr(sprintf("%06.0f", $5), 1, 2), $1} else {print $5, $3, "cod_dept", $1} }' build/dictionary.csv)"
echo "$dictionary" > build/dictionary.csv

# Bolivia - topojson
geo2topo -q 1e5 -n level3=<( \
    mapshaper build/bolivia.geojson -simplify 1% keep-shapes -clean -o format=geojson - \
      | ndjson-cat \
      | ndjson-split 'd.features' \
      | ndjson-map '(d.id = d.properties.cod_mun.toString().padStart(6, "0"), delete d.properties, d)') \
  | topomerge level2=level3 -k 'd.id.slice(0, 2)' \
  | topomerge level1=level2 \
  | node ./properties.js \
  > files/bolivia.json

mapshaper -i files/bolivia.json -o force files/bolivia.json

# Cote D'Ivoire - download (SIIP)
if [ ! -f build/cote_divoire.geojson ]; then
  aws s3 cp s3://trase-storage/cote_divoire/spatial/BOUNDARIES/DEPARTEMENT/OUT/CIV_DEPARTEMENTS.geojson build/cote_divoire.geojson
  chmod a-x build/cote_divoire.*
fi

# Cote D'Ivoire - dictionary
ndjson-cat build/cote_divoire.geojson \
  | ndjson-split 'd.features' \
  | ndjson-map 'd.properties' \
  | json2csv -n > build/dictionary.csv
dictionary="$( \
  # awk -F "," -v OFS=';' '{print $8, $1, $5, $6}' build/dictionary.csv
  sed -e 's:CI-::g' \
      -e 's:_1::g'  \
      -e 's:\.::g' build/dictionary.csv \
    | awk -F "\"*,\"*" -v OFS=';' '{if (NR!=1) {print sprintf("%04.0f", $8), $1, sprintf("%02.0f", $5), $6} else {print $8, $1, $5, $6} }' \
  )"
echo "$dictionary" > build/dictionary.csv

# Cote D'Ivoire - topojson
geo2topo -n level3=<( \
    mapshaper build/cote_divoire.geojson -proj wgs84 from='+proj=utm +zone=30 +datum=WGS84 +units=m +no_defs' -clean -o format=geojson - \
      | ndjson-cat \
      | ndjson-split 'd.features' \
      | ndjson-map '(d.id = d.properties.LVL_4_CODE.replace(/(CI-)|(_1)|(\.)/g, "").padStart(4, "0"), delete d.properties, d)') \
  | topomerge level2=level3 -k 'd.id.slice(0, 2)' \
  | topomerge level1=level2 \
  | node ./properties.js \
  > files/cote_divoire.json

  mapshaper -i files/cote_divoire.json -o force files/cote_divoire.json
